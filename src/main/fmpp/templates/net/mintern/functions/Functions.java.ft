<@pp.dropOutputFile />
<#import "/@imp/Base.ftl" as base>

<#assign jfs = {}>
<#list JAVA_FUNCTIONS as j>
    <#assign jfs = jfs + { j.className: {
        "className": j.javaClass,
        "class": (j.javaClass = "Runnable")?string("Runnable", "java.util.function." + j.javaClass),
        "method": j.javaMethod
    }}>
</#list>

<#function min x y>
    <#if x lt y>
        <#return x>
    </#if>
    <#return y>
</#function>

<#function pluck key hashSeq>
    <#local vals = []>
    <#list hashSeq as hash>
        <#local vals = vals + [hash[key]]>
    </#list>
    <#return vals>
</#function>

<#function addArg args arg>
    <#if arg.type = "void">
        <#return args>
    </#if>
    <#if isObj(arg)>
        <#local argType = PARAMETERS[args?size]>
        <#local argVar = argType?lower_case>
    <#else>
        <#local argType = arg.type>
        <#local argVar = arg.var>
    </#if>
    <#assign newArgs = []>
    <#list args as a>
        <#if a.origVar = argVar>
            <#local aVar = a.origVar + (a_index + 1)>
            <#local argVar = argVar + (args?size + 1)>
        <#else>
            <#local aVar = a.var>
        </#if>
        <#assign newArgs = newArgs + [a + { "var": aVar }]>
    </#list>
    <#return newArgs + [arg + { "type": argType, "var": argVar, "origVar": arg.var }]>
</#function>

<#function toSignature args>
    <#assign sig = []>
    <#list args as a>
        <#assign sig = sig + [a.type + " " + a.var]>
    </#list>
    <#return sig?join(", ")>
</#function>

<#function toArgList args>
    <#return pluck("var", args)?join(", ")>
</#function>

<#function ofType args ret>
    <#return "of type {@code (" + pluck("type", args)?join(", ") + ") -> ${ret.type}}">
</#function>

<#function belongsInModule args ret>
    <#if args?size != base.module.argc>
        <#return false>
    </#if>
    <#switch base.module.group>
        <#case "core">
            <#return inCoreGroup(args, ret)>
        <#case "all">
            <#return inAllGroup(args, ret)>
        <#case "extended">
            <#return !inCoreGroup(args, ret) && !inAllGroup(args, ret)>
        <#default>
            <#return true>
    </#switch>
</#function>

<#function inCoreGroup args ret>
    <#list args as a>
        <#if a.group != "core">
            <#return false>
        </#if>
    </#list>
    <#return ret.group = "core" || ret.group = "return-core">
</#function>

<#function inAllGroup args ret>
    <#list args as a>
        <#if a.group = "all">
            <#return true>
        </#if>
    </#list>
    <#return ret.group = "all">
</#function>

<#function isObj t>
    <#return t.name = "Obj">
</#function>

<#function describeTypeParam p params>
    <#if p = "R">
        <#return "the type of the return value">
    <#elseif p?starts_with("E")>
        <#return "the {@code Exception} type that the operation may throw">
    <#else>
        <#return "the type of " + argN(PARAMETERS?seq_index_of(p) + 1, params)>
    </#if>
</#function>

<#function argN n args>
    <#return (args?size gt 1)?string("argument " + n, "the argument")>

</#function>

<#function getGenericVars args ret>
    <#local vars=[]>
    <#list args as a>
        <#if isObj(a)>
            <#local vars = vars + [a.type]>
        </#if>
    </#list>
    <#if isObj(ret)>
        <#local vars = vars + [ret.type]>
    </#if>
    <#return vars>
</#function>

<#function toClassName args ret throws=false>
    <#return pluck("name", args)?join("", "Nil") + "To" + ret.name + throws?string("E", "")>
</#function>

<#function toParams typeVars extraTypeVar="">
    <#if extraTypeVar != "">
        <#local typeVars = typeVars + [extraTypeVar]>
    </#if>
    <#if typeVars?size gt 0>
        <#return "<" + typeVars?join(", ") + ">">
    </#if>
    <#return "">
</#function>

<#function toInstantiatedType args ret checked>
    <#return PACKAGE_BASE + "." + ARGC_NAMES[args?size] + checked?string(".checked", "") + "."
             + toClassName(args, ret, checked)
             + toParams(getGenericVars(args, ret), checked?string("E", ""))>
</#function>

<#macro javadoc types=[] args=[] start=1 returns={"type": "void"} indent="     " forTheArg=args>
    <#list types as t>
${indent}* @param <${t[0]}> ${describeTypeParam(t, types)}
    </#list>
    <#list args as a>
${indent}* @param ${a.var} ${argN(a_index + start, forTheArg)}
    </#list>
    <#if returns.type != "void">
${indent}* @return the result of the operation
    </#if>
</#macro>

<#macro bindReturnDocs params returns f args>
     * @return a new function {@code (${params}) -> ${returns.type}} that calls
     *      {@code ${f}.call(${args})}<#if returns.type != "void"> and returns the result</#if>.
</#macro>

<#list JAVA_TYPES as a1>
    <#list JAVA_TYPES[min(a1_index, 1)..] as a2>
        <#list JAVA_TYPES[min(a2_index, 1)..] as a3>
            <#assign args = addArg(addArg(addArg([], a1), a2), a3)>
            <#assign argSignature = toSignature(args)>
            <#assign argList = toArgList(args)>
            <#list JAVA_TYPES as r>
                <#if belongsInModule(args, r)>
                    <#assign ret = r + { "type": isObj(r)?string("R", r.type) }
                             uncheckedClassName = toClassName(args, ret)
                             checkedClassName = uncheckedClassName + "E"
                             genericVars = getGenericVars(args, ret)
                             uncheckedParams = toParams(genericVars)
                             checkedParamList = genericVars + ["E extends Exception"]
                             checkedParams = toParams(checkedParamList)>
                    <#list [true, false] as checked>
                        <#assign className = checked?string(checkedClassName, uncheckedClassName)
                                 classParams = checked?string(checkedParams, uncheckedParams)
                                 classWParams = className + classParams
                                 jf = jfs[className]!{}>
                        <#if checked>
                            <#assign paramList = checkedParamList>
                            <#if checkedClassName = "NilToObjE">
                                <#assign extends = ["java.util.concurrent.Callable<R>"]>
                            <#else>
                                <#assign extends = []>
                            </#if>
                        <#else>
                            <#assign paramList = genericVars>
                            <#assign extends = ["${base.package(true)}.${checkedClassName}"
                                                + toParams(genericVars, "RuntimeException")]>
                            <#if jf.class??>
                                <#assign extends = extends + [jf.class + classParams]>
                            </#if>
                        </#if>
                        <#if extends?size gt 0>
                            <#assign extends = "extends\n        " + extends?join(",\n        ") + " ">
                        <#else>
                            <#assign extends = "">
                        </#if>
<@pp.nestOutputFile name = base.filename(className, checked)>
package ${base.package(checked)};

/**
 * An operation ${ofType(args, ret)}.
 *
<@javadoc types=paramList indent=" "/>
 */
@FunctionalInterface
public interface ${classWParams} ${extends}{
<#if checked>

    /**
     * Performs this operation.
     *
    <@javadoc args=args returns=ret/>
     * @throws E if the operation cannot be completed
     */
    <#if checkedClassName = "NilToObjE">
    @Override
    </#if>
    ${ret.type} call(${argSignature}) throws E;
<#else>
    <#assign uncheckedRetType = "${checkedParams} ${classWParams}">
    <#assign fullCheckedClass = "${base.package(true)}.${checkedClassName}">
    <#assign checkedArgType = fullCheckedClass + toParams(genericVars, "E")>

    /**
     * Returns a wrapped version of {@code f} that uses {@code toRuntime} to convert any checked
     * {@code Exception} to a {@code RuntimeException}.
     *
    <@javadoc types=checkedParamList/>
     * @param toRuntime if a checked exception is thrown from
     *      {@link ${fullCheckedClass}#call}, then this function
     *      is called in in order to convert it to a {@code RuntimeException}
     * @param f the operation to wrap
     * @return a wrapped version of {@code f} that does not throw checked exceptions
     */
    @SuppressWarnings("unchecked")
    static ${uncheckedRetType} unchecked(
            java.util.function.Function<? super E, RuntimeException> toRuntime,
            ${checkedArgType} f) {
        return (${argList}) -> {
            try {
                <#if ret.type != "void">return </#if>f.call(${argList});
            } catch (RuntimeException e) {
                throw e;
            } catch (Exception e) {
                throw toRuntime.apply((E) e);
            }
        };
    }

    /**
     * Returns a wrapped version of {@code f} that wraps any checked {@code Exception} with a
     * {@code RuntimeException}.
     *
    <@javadoc types=checkedParamList/>
     * @param f the operation to wrap
     * @return a wrapped version of {@code f} that does not throw checked exceptions
     */
    static ${uncheckedRetType} unchecked(
            ${checkedArgType} f) {
        return unchecked(RuntimeException::new, f);
    }

    /**
     * Returns a wrapped version of {@code f} that wraps any {@code IOException} with an
     * {@link java.io.UncheckedIOException}.
     *
    <@javadoc types=checkedParamList/>
     * @param f the operation to wrap
     * @return a wrapped version of {@code f} that throws {@code UncheckedIOException} instead of
     *      {@code IOException}
     */
    static ${toParams(genericVars, "E extends java.io.IOException")} ${classWParams} uncheckedIO(
            ${checkedArgType} f) {
        return unchecked(java.io.UncheckedIOException::new, f);
    }
</#if>
<#assign leftArgs = []>
<#list args as a>
    <#assign leftArgs = leftArgs + [a]>
    <#assign rightArgs = args[a_index+1..]>
    <#assign bindType = toInstantiatedType(rightArgs, ret, checked)>
    <#assign staticClassType = className + toParams(genericVars, checked?string("E", ""))>
    <#assign bindSignature = toSignature(leftArgs)>
    <#assign rbindSignature = toSignature(rightArgs)>
    <#assign leftArgList = toArgList(leftArgs)>
    <#assign rightArgList = toArgList(rightArgs)>
    <#assign theBeginningOf = (rightArgs?size gt 0)?string("the beginning of ", "")>

    /**
     * Binds {@code (${leftArgList})} to ${theBeginningOf}{@code f}, returning a new function
     * ${ofType(rightArgs, ret)}.
     *
    <@javadoc types=paramList/>
     * @param f the unbound function
    <@javadoc args=leftArgs forTheArg=args/>
    <@bindReturnDocs params=rbindSignature returns=ret f="f" args=argList/>
     */
    <#if checked && rightArgs?size = 0 && isObj(ret)>
    @SuppressWarnings("unchecked") // maven spuriously warns about a type error in this case
    </#if>
    static ${classParams} ${bindType}
    bind(${staticClassType} f, ${bindSignature}) {
        return (${rightArgList}) -> f.call(${argList});
    }

    /**
     * Binds {@code (${leftArgList})} to ${theBeginningOf}{@code this}, returning a new function
     * ${ofType(rightArgs, ret)}.
     *
    <@javadoc args=leftArgs forTheArg=args/>
    <@bindReturnDocs params=rbindSignature returns=ret f="this" args=argList/>
     */
    <#if !checked>
    @Override
    </#if>
    default ${bindType} bind(${bindSignature}) {
        return ${className}.bind(this, ${leftArgList});
    }
    <#if rightArgs?size gt 0>
    <#assign rbindType = toInstantiatedType(leftArgs, ret, checked)>

    /**
     * Binds {@code (${rightArgList})} to the end of {@code f}, returning a new function
     * ${ofType(leftArgs, ret)}.
     *
    <@javadoc types=paramList/>
     * @param f the unbound function
    <@javadoc args=rightArgs start=leftArgs?size+1 forTheArg=args/>
    <@bindReturnDocs params=bindSignature returns=ret f="f" args=argList/>
     */
    static ${classParams} ${rbindType}
    rbind(${staticClassType} f, ${rbindSignature}) {
        return (${leftArgList}) -> f.call(${argList});
    }

    /**
     * Binds {@code (${rightArgList})} to the end of {@code this}, returning a new function
     * ${ofType(leftArgs, ret)}.
     *
    <@javadoc args=rightArgs start=leftArgs?size+1 forTheArg=args/>
    <@bindReturnDocs params=bindSignature returns=ret f="this" args=argList/>
     */
    <#if !checked>
    @Override
    </#if>
    default ${rbindType} rbind(${rbindSignature}) {
        return ${className}.rbind(this, ${rightArgList});
    }
    </#if>
</#list>
<#if jf.method??>

    /**
     * Allows {@code this} to act as a {@code ${jf.className + classParams}}.
     *
    <@javadoc args=args returns=ret/>
     */
    @Override
    default ${ret.type} ${jf.method}(${argSignature}) {
        <#if ret.type != "void">return </#if>call(${argList});
    }
</#if>
}
</@pp.nestOutputFile>
</#list></#if></#list></#list></#list></#list>
